---
// Import our CSS styles
import '../styles/main.css';
import { getCollection, getEntry } from 'astro:content';

// Get all content from collections (excluding certificates)
const personalDetails = await getEntry('personal', 'details');
const qualifications = await getCollection('qualifications');
const employment = await getCollection('employment');
const education = await getCollection('education');

// Sort employment by start date (most recent first)
const sortedEmployment = employment.sort((a, b) => {
	const dateA = new Date(a.data.startDate);
	const dateB = new Date(b.data.startDate);
	return dateB.getTime() - dateA.getTime();
});

// Sort qualifications by issue date (most recent first)
const sortedQualifications = qualifications.sort((a, b) => {
	if (!a.data.issueDate || !b.data.issueDate) return 0;
	const dateA = new Date(a.data.issueDate);
	const dateB = new Date(b.data.issueDate);
	return dateB.getTime() - dateA.getTime();
});

// Group qualifications by category
const qualificationsByCategory = sortedQualifications.reduce((acc, qual) => {
	const category = qual.data.category || 'Other';
	if (!acc[category]) acc[category] = [];
	acc[category].push(qual);
	return acc;
}, {} as Record<string, typeof qualifications>);

// Format date helper
function formatDate(dateString: string | undefined): string {
	if (!dateString) return 'Present';
	const date = new Date(dateString);
	return date.toLocaleDateString('en-GB', { 
		year: 'numeric', 
		month: 'short' 
	});
}

// Format date range helper
function formatDateRange(startDate: string, endDate?: string): string {
	const start = formatDate(startDate);
	const end = endDate ? formatDate(endDate) : 'Present';
	return `${start} – ${end}`;
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<title>Sean Sebastian Vos - Professional CV (Minimal)</title>
		<meta name="description" content="Minimal Professional CV of Sean Sebastian Vos - Commercial Diver and Marine Professional" />
	</head>
	<body class="font-family-cv-sans bg-cv-background text-cv-primary">
		<div class="cv-document">
			
			<!-- Header Section -->
			<header class="mb-8">
				<div class="text-center mb-8">
					<h1 class="cv-h1 mb-4">Curriculum Vitae</h1>
					<h2 class="text-2xl font-medium mb-8">{personalDetails?.data.name}</h2>
				</div>
				
				<!-- Personal Particulars Table -->
				<div class="mb-8">
					<h2 class="cv-h2">Personal Particulars</h2>
					<table class="cv-table">
						<tbody>
							<tr>
								<td class="cv-table-label">Name</td>
								<td class="cv-table-value">{personalDetails?.data.name}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Address</td>
								<td class="cv-table-value">{personalDetails?.data.address}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Email Address</td>
								<td class="cv-table-value">{personalDetails?.data.email}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Contact Numbers</td>
								<td class="cv-table-value">{personalDetails?.data.phone}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Passport Number</td>
								<td class="cv-table-value">{personalDetails?.data.passport}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Date of Birth</td>
								<td class="cv-table-value">{formatDate(personalDetails?.data.dateOfBirth)}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Nationality</td>
								<td class="cv-table-value">{personalDetails?.data.nationality}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Sex</td>
								<td class="cv-table-value">{personalDetails?.data.sex}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Marital Status</td>
								<td class="cv-table-value">{personalDetails?.data.maritalStatus}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Dependants</td>
								<td class="cv-table-value">{personalDetails?.data.dependants}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Languages</td>
								<td class="cv-table-value">{personalDetails?.data.languages}</td>
							</tr>
							<tr>
								<td class="cv-table-label">Health</td>
								<td class="cv-table-value">{personalDetails?.data.health}</td>
							</tr>
						</tbody>
					</table>
				</div>
			</header>

			<!-- Education -->
			<section class="cv-section mb-8">
				<h2 class="cv-h2">Education</h2>
				
				<table class="cv-table">
					<tbody>
						{education.map((edu) => (
							<>
								<tr>
									<td class="cv-table-label">Last School Attended</td>
									<td class="cv-table-value">{edu.data.institution}</td>
								</tr>
								<tr>
									<td class="cv-table-label">Highest Standard Passed</td>
									<td class="cv-table-value">{edu.data.qualification}</td>
								</tr>
								{edu.data.yearCompleted && (
									<tr>
										<td class="cv-table-label">Year Completed</td>
										<td class="cv-table-value">{formatDate(edu.data.yearCompleted)}</td>
									</tr>
								)}
								{edu.data.location && (
									<tr>
										<td class="cv-table-label">Location</td>
										<td class="cv-table-value">{edu.data.location}</td>
									</tr>
								)}
							</>
						))}
					</tbody>
				</table>
			</section>

			<!-- Professional Qualifications -->
			<section class="cv-section mb-8">
				<h2 class="cv-h2">Qualifications</h2>
				
				{Object.entries(qualificationsByCategory).map(([category, quals]) => (
					<div class="mb-6">
						<h3 class="cv-h3">{category}</h3>
						<table class="cv-table">
							<thead>
								<tr>
									<th>Qualification</th>
									<th>Issuer</th>
									<th>Issue Date</th>
									<th>Expiry Date</th>
									<th>Status</th>
								</tr>
							</thead>
							<tbody>
								{quals.map((qual) => (
									<tr>
										<td class="font-medium">{qual.data.title}</td>
										<td>{qual.data.issuer}</td>
										<td>{formatDate(qual.data.issueDate)}</td>
										<td>{qual.data.expiryDate ? formatDate(qual.data.expiryDate) : '–'}</td>
										<td>
											<span class={`inline-block px-2 py-1 text-xs rounded ${
												qual.data.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
											}`}>
												{qual.data.isActive ? 'Active' : 'Expired'}
											</span>
										</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>
				))}
			</section>

			<!-- Employment History -->
			<section class="cv-section mb-8">
				<h2 class="cv-h2">Employment History</h2>
				
				{sortedEmployment.map((job) => (
					<div class="cv-entry">
						<div class="cv-entry-header">
							<div>
								<div class="cv-entry-title">{job.data.position}</div>
								<div class="cv-entry-company">{job.data.company}</div>
								{job.data.client && (
									<div class="text-sm text-cv-secondary">Client: {job.data.client}</div>
								)}
							</div>
							<div class="cv-entry-dates">
								{formatDateRange(job.data.startDate, job.data.endDate)}
							</div>
						</div>
						<div class="cv-entry-location">{job.data.location}</div>
						
						{job.data.description && (
							<div class="cv-entry-description">
								{job.data.description}
							</div>
						)}
						
						{job.data.achievements && job.data.achievements.length > 0 && (
							<div class="mt-3">
								<h4 class="cv-h4">Key Achievements</h4>
								<ul class="cv-list">
									{job.data.achievements.map((achievement) => (
										<li>{achievement}</li>
									))}
								</ul>
							</div>
						)}
						
						{job.data.skills && job.data.skills.length > 0 && (
							<div class="mt-3">
								<h4 class="cv-h4">Key Skills</h4>
								<ul class="cv-list">
									{job.data.skills.map((skill) => (
										<li>{skill}</li>
									))}
								</ul>
							</div>
						)}
					</div>
				))}
			</section>

		</div>

		<!-- Print Button (hidden in print) -->
		<div class="no-print fixed bottom-4 right-4">
			<button 
				onclick="window.print()" 
				class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded shadow-lg transition-colors"
			>
				Print CV
			</button>
		</div>

		<!-- Navigation Link (hidden in print) -->
		<div class="no-print fixed bottom-4 left-4">
			<a 
				href="/" 
				class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded shadow-lg transition-colors inline-block"
			>
				← Full CV
			</a>
		</div>

	</body>
</html> 